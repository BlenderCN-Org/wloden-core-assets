import shaderSignature;
import environment;
import fragment;
import terrainMaterial;
import lighting;

function transformNormalToView(normal: float3) -> float3
{
    using CameraState;
    using ObjectState;
    using InstanceObjectState;

    return ((float4(normal, 0.0f) * objectState.inverseMatrix) * inverseViewMatrix).xyz;
}

code_block(fragment) main
{
    let dh = 0.01f;
    let texcoord = FragmentInput.texcoord;
    let dx = displacementSampler.sample(heightMapTexture, texcoord + float2(0.0f, dh)).r - displacementSampler.sample(heightMapTexture, texcoord - float2(0.0f, dh)).r;
    let dy = displacementSampler.sample(heightMapTexture, texcoord + float2(dh, 0.0f)).r - displacementSampler.sample(heightMapTexture, texcoord - float2(dh, 0.0f)).r;

    let tangent = normalize(transformNormalToView(float3(dh, dx, 0.0f)));
    let bitangent = normalize(transformNormalToView(float3(0.0f, dy, dh)));
    let N = normalize(cross(bitangent, tangent));

    let V = normalize(-FragmentInput.position);

    color: FragmentOutput.color <== forwardLightingModel
        albedo: FragmentInput.color*MaterialState.albedo
        fresnel: MaterialState.fresnel smoothness: MaterialState.smoothness
        normal: N viewVector: V position: FragmentInput.position;
}
