struct ObjectStateData
{
    matrix: float4x4;
    inverseMatrix: float4x4;
    color: float4;
}

uniform(set=0, binding=0) ObjectState
{
    objectState: ObjectStateData;
}

buffer(set=0, binding=1) InstanceObjectState
{
    instanceStates: ObjectStateData[];
}

uniform(set=1, binding=0) CameraState
{
    inverseViewMatrix: float4x4;
    viewMatrix: float4x4;

    projectionMatrix: float4x4;
    currentTime: float;
}

uniform(set=2, binding=0) GlobalLightingState
{
    // Hemisphere lighting
    groundLighting: float4;
    skyLighting: float4;
    sunDirection: float3;

    // Normal lights
    numberOfLights: int;
    lightSources: LightSource[16];
}

struct LightSource
{
    position: float4;
    intensity: float4;
    spotDirection: float3;
    innerCosCutoff: float;
    outerCosCutoff: float;
    spotExponent: float;
    radius: float;
}

function cameraWorldPosition() -> float3
{
    using CameraState;

    return inverseViewMatrix[3].xyz;
}



function fresnelSchlick(F0: float3, cosTheta: float) -> float3
{
    let powFactor = 1.0f - cosTheta;
    let powFactor2 = powFactor * powFactor;
    let powFactor4 = powFactor2 * powFactor2;
    let powValue = powFactor4 * powFactor;

    return F0 + (float3(1.0f, 1.0f, 1.0f) - F0) * powValue;
}

function fresnelSchlick(F0: float, cosTheta: float) -> float
{
    let powFactor = 1.0f - cosTheta;
    let powFactor2 = powFactor * powFactor;
    let powFactor4 = powFactor2 * powFactor2;
    let powValue = powFactor4 * powFactor;

    return F0 + (1.0f - F0) * powValue;
}
